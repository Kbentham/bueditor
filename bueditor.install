<?php
// $Id$

/**
 * Implementation of hook_install()
 */
function bueditor_install() {
  drupal_install_schema('bueditor');
  module_load_include('inc', 'bueditor', 'bueditor.admin');
  register_shutdown_function('drupal_get_schema', NULL, TRUE);//allows using drupal_write_record
  register_shutdown_function('bueditor_create_default');//create the default editor
}

/**
 * Implementation of hook_uninstall().
 */
function bueditor_uninstall() {
  drupal_uninstall_schema('bueditor');
  variable_del('bueditor_user1');
  variable_del('bueditor_user1_alt');
  variable_del('bueditor_roles');
}


/**
 * Implementation of hook_schema().
 */
function bueditor_schema() {
  $schema['bueditor_editors'] = array(
    'description' => t('Stores editors and their settings.'),
    'fields' => array(
      'eid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('Primary Key: Unique editor ID.'),
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'Noname',
        'description' => t('The editor name.'),
      ),
      'pages' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('Drupal paths on which the editor is visible.'),
      ),
      'excludes' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('Textarea ids for which the editor is not visible.'),
      ),
      'iconpath' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '%BUEDITOR/icons',
        'description' => t('The directory path where the editor icons reside.'),
      ),
      'librarypath' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('Files to be included with the editor.'),
      ),
    ),
    'primary key' => array('eid'),
  );

  $schema['bueditor_buttons'] = array(
    'description' => t('Stores buttons of {bueditor_editors}.'),
    'fields' => array(
      'bid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('Primary Key: Unique button ID.'),
      ),
      'eid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {bueditor_editors}.eid to which the button belongs.'),
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'Notitle',
        'description' => t('The button title.'),
      ),
      'content' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('The button content.'),
      ),
      'icon' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The button icon or caption.'),
      ),
      'accesskey' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The button acceskey.'),
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The button weight that determines the button location in the editor layout.'),
      ),
    ),
    'primary key' => array('bid'),
    'indexes' => array(
      'eid' => array('eid')
    ),
  );

  return $schema;
}

/**
 * Update from 4|5.x to 6.x
 * Add new fields: {bueditor_editors}.iconpath, {bueditor_editors}.librarypath.
 * Change {bueditor_buttons}.accesskey field type from char to varchar.
 * Update {bueditor_buttons}.content field values.
 * Delete needless cron variable.
 */
function bueditor_update_6000() {
  $ret = array();
  $iconpath = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '%BUEDITOR/icons',
  );
  $librarypath = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '%BUEDITOR/library',
  );
  $accesskey = array(
    'type' => 'varchar',
    'length' => 1,
    'not null' => TRUE,
    'default' => '',
  );
  db_add_field($ret, 'bueditor_editors', 'iconpath', $iconpath);
  db_add_field($ret, 'bueditor_editors', 'librarypath', $librarypath);
  db_change_field($ret, 'bueditor_buttons', 'accesskey', 'accesskey', $accesskey);
  variable_del('bueditor_cron_last');
  //update button contents
  $result = db_query("SELECT bid, content FROM {bueditor_buttons} WHERE content LIKE '%%%s%%' OR content LIKE '%%%s%%' OR content LIKE '%%%s%%'", 'editor.', 'imce', 'eDefSelP');
  $tr = array('editor.' => 'BUE.', "user_access('access imce')" => 'imce_access()', 'imce/browse' => 'imce', 'eDefSelProcessLines' => 'eDefTagLines');
  while ($button = db_fetch_object($result)) {
    $button->content = strtr($button->content, $tr);
    db_query("UPDATE {bueditor_buttons} SET content = '%s' WHERE bid = %d", $button->content, $button->bid);
  }
  return $ret;
}

/**
 * 6.x-1.x to 6.x-2.x
 * Change {bueditor_editors}.librarypath field type from varchar to text.
 * It now stores file paths rather than a directory path.
 */
function bueditor_update_6200() {
  $ret = array();
  $librarypath = array(
    'type' => 'text',
    'not null' => TRUE
  );
  db_change_field($ret, 'bueditor_editors', 'librarypath', 'librarypath', $librarypath);
  //scan library directories for js files and insert them into librarypath field.
  $files = array();
  foreach (bueditor_editors('all') as $eid => $editor) {
    $path = $editor->librarypath;
    if (!isset($files[$path])) {
      $names = file_scan_directory(bueditor_path_tr($path), '\.js$', array('.', '..', 'CVS'), 0, 0, 'basename');
      $files[$path] = empty($names) ? '' : $path .'/'. implode("\n$path/", array_keys($names));
    }
    db_query("UPDATE {bueditor_editors} SET librarypath = '%s' WHERE eid = %d", $files[$path], $eid);
  }
  return $ret;
}